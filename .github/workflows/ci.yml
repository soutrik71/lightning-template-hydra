name: CI Pipeline

on:
  push:
    branches:
      - main
      - feat/*
  pull_request:
    branches:
      - main
      - feat/*

jobs:
  python_basic_test:
    name: Test current codebase and setup Python environment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.10.14]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment with the specified version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install Poetry and set virtualenv to be created inside the project directory
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.in-project true  # Ensure the virtual environment is created in the project directory

      # Step 4: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            pytorch_project/.venv  # Cache the virtual environment in the project directory
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pytorch_project/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 5: Install dependencies with Poetry
      - name: Install dependencies
        working-directory: pytorch_project
        run: |
          poetry install

      # Step 6: Check Poetry environment
      - name: Check Poetry environment
        working-directory: pytorch_project
        run: |
          source .venv/bin/activate 
          poetry env info

      # Step 7: Set environment variables from GitHub Secrets and write to .env
      - name: Create .env file
        run: |
          echo "KAGGLE_USERNAME=${{ secrets.KAGGLE_USERNAME }}" >> .env
          echo "KAGGLE_KEY=${{ secrets.KAGGLE_KEY }}" >> .env
          echo ".env file created"
        working-directory: pytorch_project

      # Step 8: Activate the Poetry environment and run tests with coverage
      - name: Run tests with coverage
        run: |
          source pytorch_project/.venv/bin/activate 
          pytest --cov=pytorch_project --cov-report=xml --cov-report=term -v
        env:  # Load .env file into environment
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

      # Step 9: Upload the coverage XML report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml  # Path where pytest saves coverage.xml

      # Step 10: Run lint checks at the root level
      - name: Run lint checks
        run: |
          source pytorch_project/.venv/bin/activate
          flake8 .

      # Step 11: Run mypy checks at the root level
      - name: download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

  pytorch_code_test:
    name: Test PyTorch code
    runs-on: ubuntu-latest

    needs: python_basic_test  # This ensures pytorch_code_test runs only after python_basic_test completes successfully

    strategy:
      matrix:
        python-version: [3.10.14]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment with the specified version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install Poetry and set virtualenv to be created inside the project directory
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.in-project true  # Ensure the virtual environment is created in the project directory

      # Step 4: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            pytorch_project/.venv  # Cache the virtual environment in the project directory
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pytorch_project/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 5: Install dependencies with Poetry
      - name: Install dependencies
        working-directory: pytorch_project
        run: |
          poetry install

      # Step 6: Check Poetry environment
      - name: Check Poetry environment
        working-directory: pytorch_project
        run: |
          source .venv/bin/activate 
          poetry env info
      # Step 7: Run the model training code
      - name: Run Train code
        run: |
          source pytorch_project/.venv/bin/activate 
          python -m src.train
        env:  # Load .env file into environment
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      # Step 8: Check if the training accuracy is above a certain threshold
      - name: Check validation accuracy
        run: |
          LOG_FILE_PATH="/home/runner/work/lightning-template-hydra/lightning-template-hydra/logs/train.log"
          
          if [ ! -f $LOG_FILE_PATH ]; then
            echo "Log file not found. Failing the build."
            exit 1
          else
            echo "Log file found. Proceeding with the build."
          fi

          # Extract train accuracy from the log file
          accuracy=$(grep -oP 'train_acc: \K[0-9]+(\.[0-9]+)?' $LOG_FILE_PATH)
          
          if [ -z "$accuracy" ]; then
            echo "Train accuracy not found in the log file. Failing the build."
            exit 1
          fi

          # Check if accuracy is less than 95%
          if [ $accuracy -lt 0.2 ]; then
            echo "Train accuracy ($accuracy%) is below 95%. Failing the build."
            exit 1
          else
            echo "Train accuracy ($accuracy%) is sufficient. Proceeding with the build."
          fi
      # Step 9: Upload the model checkpoints, logs, and configs as artifacts
      - name: upload model checkpoints
        uses: actions/upload-artifact@v4
        with:
          name: model-checkpoints
          path: ./model_checkpoints/

      - name: upload logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: ./logs/

      - name: upload configs
        uses: actions/upload-artifact@v4
        with:
          name: configs
          path: ./configs/