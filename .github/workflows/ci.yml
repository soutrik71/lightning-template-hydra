name: CI Pipeline

on:
  push:
    branches:
      - main
      - feat/*
  pull_request:
    branches:
      - main
      - feat/*

jobs:
  test:
    name: Test on Python code
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.10.14]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment with the specified version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install Poetry and set virtualenv to be created inside the project directory
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.in-project true  # Ensure the virtual environment is created in the project directory

      # Step 4: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            pytorch_project/.venv  # Cache the virtual environment in the project directory
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pytorch_project/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 5: Install dependencies with Poetry
      - name: Install dependencies
        working-directory: pytorch_project
        run: |
          poetry install

      # Step 6: Set environment variables from GitHub Secrets and write to .env
      - name: Create .env file
        run: |
          echo "KAGGLE_USERNAME=${{ secrets.KAGGLE_USERNAME }}" >> .env
          echo "KAGGLE_KEY=${{ secrets.KAGGLE_KEY }}" >> .env
          echo ".env file created"
        working-directory: pytorch_project

      # Step 7: Source and echo environment variables from the .env file (for debugging)
      - name: Echo environment variables from .env
        run: |
          set -o allexport
          source .env
          set +o allexport
          echo "KAGGLE_USERNAME: $KAGGLE_USERNAME"
          echo "KAGGLE_KEY: $KAGGLE_KEY"
        working-directory: pytorch_project

      # Step 8: Activate the Poetry environment and run tests with coverage
      - name: Run tests with coverage
        run: |
          source pytorch_project/.venv/bin/activate  # Activate the virtual environment
          pytest --cov=pytorch_project --cov-report=xml --cov-report=term -v  # Run tests with coverage
        working-directory: pytorch_project
        env:  # Ensure environment variables are loaded
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

      # Step 9: Upload the coverage XML report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: pytorch_project/coverage.xml  # Ensure correct path to the coverage.xml file

      # Step 10: Run lint checks at the root level
      - name: Run lint checks
        run: |
          source pytorch_project/.venv/bin/activate  # Activate virtual environment for linting
          poetry run flake8 .
        working-directory: pytorch_project

      # Step 11: Check Poetry environment
      - name: Check Poetry environment
        run: |
          source pytorch_project/.venv/bin/activate  # Activate virtual environment for Poetry check
          poetry env info
